# Generated by Django 5.2.5 on 2025-09-20 19:22

import datetime
import django.db.models.deletion
import django.utils.timezone
import storages.backends.s3
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.CharField(help_text='Como desbloquear este item.', max_length=255)),
                ('imagem', models.ImageField(blank=True, null=True, storage=storages.backends.s3.S3Storage(), upload_to='gamificacao_recompensas/')),
                ('tipo_desbloqueio', models.CharField(choices=[('NIVEL', 'Por Nível'), ('CONQUISTA', 'Por Conquista'), ('EVENTO', 'Concedido por Administrador (Evento)'), ('CAMPANHA', 'Recompensa de Campanha'), ('LOJA', 'Comprável na Loja')], max_length=20)),
                ('raridade', models.CharField(choices=[('COMUM', 'Comum'), ('RARO', 'Raro'), ('EPICO', 'Épico'), ('LENDARIO', 'Lendário'), ('MITICO', 'Mítico')], default='COMUM', max_length=20)),
                ('nivel_necessario', models.PositiveIntegerField(blank=True, null=True)),
                ('preco_moedas', models.PositiveIntegerField(default=0, help_text='Custo do item na loja. Defina 0 se não for comprável.', verbose_name='Preço em Moedas')),
            ],
            options={
                'ordering': ['nome'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.CharField(help_text='Como desbloquear este item.', max_length=255)),
                ('imagem', models.ImageField(blank=True, null=True, storage=storages.backends.s3.S3Storage(), upload_to='gamificacao_recompensas/')),
                ('tipo_desbloqueio', models.CharField(choices=[('NIVEL', 'Por Nível'), ('CONQUISTA', 'Por Conquista'), ('EVENTO', 'Concedido por Administrador (Evento)'), ('CAMPANHA', 'Recompensa de Campanha'), ('LOJA', 'Comprável na Loja')], max_length=20)),
                ('raridade', models.CharField(choices=[('COMUM', 'Comum'), ('RARO', 'Raro'), ('EPICO', 'Épico'), ('LENDARIO', 'Lendário'), ('MITICO', 'Mítico')], default='COMUM', max_length=20)),
                ('nivel_necessario', models.PositiveIntegerField(blank=True, null=True)),
                ('preco_moedas', models.PositiveIntegerField(default=0, help_text='Custo do item na loja. Defina 0 se não for comprável.', verbose_name='Preço em Moedas')),
            ],
            options={
                'ordering': ['nome'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BannerUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_desbloqueio', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Borda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.CharField(help_text='Como desbloquear este item.', max_length=255)),
                ('imagem', models.ImageField(blank=True, null=True, storage=storages.backends.s3.S3Storage(), upload_to='gamificacao_recompensas/')),
                ('tipo_desbloqueio', models.CharField(choices=[('NIVEL', 'Por Nível'), ('CONQUISTA', 'Por Conquista'), ('EVENTO', 'Concedido por Administrador (Evento)'), ('CAMPANHA', 'Recompensa de Campanha'), ('LOJA', 'Comprável na Loja')], max_length=20)),
                ('raridade', models.CharField(choices=[('COMUM', 'Comum'), ('RARO', 'Raro'), ('EPICO', 'Épico'), ('LENDARIO', 'Lendário'), ('MITICO', 'Mítico')], default='COMUM', max_length=20)),
                ('nivel_necessario', models.PositiveIntegerField(blank=True, null=True)),
                ('preco_moedas', models.PositiveIntegerField(default=0, help_text='Custo do item na loja. Defina 0 se não for comprável.', verbose_name='Preço em Moedas')),
            ],
            options={
                'ordering': ['nome'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BordaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_desbloqueio', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Campanha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome da Campanha')),
                ('ativo', models.BooleanField(default=True, verbose_name='Campanha Ativa?')),
                ('data_inicio', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Início da Vigência')),
                ('data_fim', models.DateTimeField(blank=True, null=True, verbose_name='Fim da Vigência (opcional)')),
                ('tipo_recorrencia', models.CharField(choices=[('UNICA', 'Apenas Uma Vez (Geral)'), ('UNICA_POR_USUARIO', 'Apenas Uma Vez por Usuário'), ('DIARIA', 'Diariamente'), ('SEMANAL', 'Semanalmente'), ('MENSAL', 'Mensalmente')], default='SEMANAL', max_length=20)),
                ('gatilho', models.CharField(choices=[('COMPLETAR_SIMULADO', 'Ao Completar um Simulado'), ('RANKING_SEMANAL_CONCLUIDO', 'Ao Fechar o Ranking Semanal'), ('RANKING_MENSAL_CONCLUIDO', 'Ao Fechar o Ranking Mensal')], max_length=50, verbose_name='Gatilho de Ativação')),
                ('grupos_de_condicoes', models.JSONField(blank=True, default=list, verbose_name='Grupos de Condições e Recompensas')),
            ],
        ),
        migrations.CreateModel(
            name='CampanhaUsuarioCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ciclo_id', models.CharField(help_text="Identificador do ciclo. Ex: '2024-W38' (semanal) ou '2024-09' (mensal)", max_length=20)),
                ('data_conclusao', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-data_conclusao'],
            },
        ),
        migrations.CreateModel(
            name='Condicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parametros_valores', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Conquista',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True)),
                ('descricao', models.TextField(help_text='Explique o que o usuário precisa fazer para ganhar esta conquista.')),
                ('icone', models.CharField(help_text="Ex: 'fas fa-fire' (classes do Font Awesome)", max_length=50)),
                ('cor', models.CharField(default='gold', help_text="Cor do ícone (ex: 'gold', '#FFD700')", max_length=20)),
                ('is_secreta', models.BooleanField(default=False, help_text='Se marcado, não aparecerá na trilha até ser desbloqueada.', verbose_name='É uma Conquista Secreta?')),
                ('recompensas', models.JSONField(blank=True, default=dict, help_text='JSON com as recompensas concedidas. Ex: {"xp": 100, "moedas": 50, "avatares": [1, 2]}', verbose_name='Recompensas Diretas')),
            ],
            options={
                'ordering': ['trilha__ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='ConquistaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_conquista', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-data_conquista'],
            },
        ),
        migrations.CreateModel(
            name='GamificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xp_por_acerto', models.PositiveIntegerField(default=10, help_text='XP ganho ao acertar uma questão que já foi respondida corretamente antes.', verbose_name='XP por Acerto Padrão')),
                ('xp_por_erro', models.PositiveIntegerField(default=2, help_text="XP ganho (ou 'de consolação') ao errar uma questão.", verbose_name='XP por Erro')),
                ('xp_acerto_primeira_vez', models.PositiveIntegerField(default=15, help_text='XP total ganho ao acertar uma questão pela primeira vez. Deve ser maior que o acerto padrão.', verbose_name='Bônus de XP por Acerto na Primeira Vez')),
                ('xp_acerto_redencao', models.PositiveIntegerField(default=20, help_text='XP total ganho ao acertar uma questão que o usuário errou anteriormente. Recompensa o estudo e a correção.', verbose_name='Bônus de XP por Redenção (Corrigir um Erro)')),
                ('acertos_consecutivos_para_bonus', models.PositiveIntegerField(default=5, help_text='Quantas questões o usuário precisa acertar em sequência para ativar o multiplicador de XP.', verbose_name='Nº de Acertos Consecutivos para Bônus')),
                ('bonus_multiplicador_acertos_consecutivos', models.FloatField(default=2.0, help_text='Por quanto o XP de acerto será multiplicado quando o bônus estiver ativo (Ex: 2.0 para XP em dobro).', verbose_name='Multiplicador de XP do Bônus')),
                ('xp_bonus_meta_diaria', models.PositiveIntegerField(default=50, help_text='Bônus de XP concedido uma vez por dia ao atingir a meta de questões resolvidas.', verbose_name='Bônus de XP por Meta Diária')),
                ('meta_diaria_questoes', models.PositiveIntegerField(default=15, help_text='Número de questões que o usuário precisa resolver no dia para ganhar o bônus.', verbose_name='Questões para Atingir a Meta Diária')),
                ('habilitar_teto_xp_diario', models.BooleanField(default=False, help_text='Se marcado, limita a quantidade de XP que um usuário pode ganhar por dia.', verbose_name='Habilitar Teto de XP Diário?')),
                ('teto_xp_diario', models.PositiveIntegerField(default=500, help_text='Quantidade máxima de XP que pode ser ganha em 24 horas, se o teto estiver habilitado.', verbose_name='Teto de XP Diário')),
                ('cooldown_mesma_questao_horas', models.PositiveIntegerField(default=24, help_text='Impede que o usuário ganhe XP respondendo à mesma questão várias vezes em um curto período.', verbose_name='Cooldown para ganhar XP na mesma questão (em horas)')),
                ('tempo_minimo_entre_respostas_segundos', models.PositiveIntegerField(default=5, help_text='Proteção anti-bot. Respostas mais rápidas que isso não geram XP.', verbose_name='Tempo mínimo entre respostas para ganhar XP (em segundos)')),
                ('cooldown_mesmo_simulado_horas', models.PositiveIntegerField(default=48, help_text='Impede que o usuário ganhe XP finalizando o mesmo simulado várias vezes em um curto período.', verbose_name='Cooldown para ganhar XP no mesmo simulado (em horas)')),
                ('usar_xp_dinamico_simulado', models.BooleanField(default=True, help_text='Se marcado, o XP será calculado com base nos acertos/erros. Se desmarcado, usará o valor fixo abaixo.', verbose_name='Usar XP Dinâmico por Desempenho em Simulados?')),
                ('xp_dinamico_considera_erros', models.BooleanField(default=True, help_text='Se marcado, a pontuação dos erros será somada no cálculo do XP dinâmico.', verbose_name='Considerar XP por Erro no cálculo dinâmico?')),
                ('multiplicador_xp_simulado', models.FloatField(default=1.2, help_text='Ex: 1.2 significa que o XP ganho no simulado será 20% maior que na prática normal.', verbose_name='Multiplicador de XP para Simulados Dinâmicos')),
                ('xp_base_simulado_concluido', models.PositiveIntegerField(default=100, help_text='XP ganho apenas por finalizar um simulado, se o XP dinâmico estiver desativado.', verbose_name='XP Fixo por Simulado Concluído')),
                ('moedas_por_acerto', models.PositiveIntegerField(default=5, verbose_name='Moedas por Acerto de Questão')),
                ('moedas_por_meta_diaria', models.PositiveIntegerField(default=25, verbose_name='Moedas Bônus por Meta Diária')),
                ('moedas_por_conclusao_simulado', models.PositiveIntegerField(default=50, verbose_name='Moedas por Concluir Simulado')),
            ],
            options={
                'verbose_name': 'Configurações de Gamificação',
                'verbose_name_plural': 'Configurações de Gamificação',
            },
        ),
        migrations.CreateModel(
            name='MetaDiariaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(default=datetime.date.today)),
                ('questoes_resolvidas', models.PositiveIntegerField(default=0)),
                ('meta_atingida', models.BooleanField(default=False)),
                ('xp_ganho_dia', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['-data'],
            },
        ),
        migrations.CreateModel(
            name='ProfileGamificacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=1, verbose_name='Nível')),
                ('xp', models.IntegerField(default=0, verbose_name='Pontos de Experiência (XP)')),
                ('moedas', models.PositiveIntegerField(default=100, verbose_name='Fragmentos de Conhecimento (Moedas)')),
                ('acertos_consecutivos', models.IntegerField(default=0, verbose_name='Acertos Consecutivos')),
                ('bonus_xp_ativo', models.BooleanField(default=False, help_text='Indica se o bônus de XP em dobro está ativo.')),
                ('cooldowns_ativos', models.JSONField(blank=True, default=dict, help_text='Armazena timestamps de cooldowns para evitar farming.')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak', models.IntegerField(default=0)),
                ('max_streak', models.IntegerField(default=0)),
                ('last_practice_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RankingMensal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posicao', models.PositiveIntegerField()),
                ('acertos_periodo', models.PositiveIntegerField(default=0)),
                ('respostas_periodo', models.PositiveIntegerField(default=0)),
                ('ano', models.PositiveIntegerField()),
                ('mes', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'Ranking Mensal',
                'verbose_name_plural': 'Rankings Mensais',
                'ordering': ['posicao'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RankingSemanal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posicao', models.PositiveIntegerField()),
                ('acertos_periodo', models.PositiveIntegerField(default=0)),
                ('respostas_periodo', models.PositiveIntegerField(default=0)),
                ('ano', models.PositiveIntegerField()),
                ('semana', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'Ranking Semanal',
                'verbose_name_plural': 'Rankings Semanais',
                'ordering': ['posicao'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecompensaPendente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('data_ganho', models.DateTimeField(auto_now_add=True)),
                ('resgatado_em', models.DateTimeField(blank=True, null=True)),
                ('origem_desbloqueio', models.CharField(help_text="Descrição da origem do prêmio. Ex: 'Alcançou o Nível 10', 'Conquista Mestre Cuca'", max_length=255)),
            ],
            options={
                'verbose_name': 'Recompensa Pendente',
                'verbose_name_plural': 'Recompensas Pendentes',
                'ordering': ['-data_ganho'],
            },
        ),
        migrations.CreateModel(
            name='RecompensaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('data_concessao', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-data_concessao'],
            },
        ),
        migrations.CreateModel(
            name='TarefaAgendadaLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_tarefa', models.CharField(choices=[('gerar_ranking_semanal', 'Gerar Ranking Semanal'), ('gerar_ranking_mensal', 'Gerar Ranking Mensal')], max_length=50, unique=True)),
                ('ultima_execucao', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='TipoCondicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Condição')),
                ('chave', models.CharField(help_text="Identificador único usado pelo sistema (ex: 'volume_questoes', 'streak_dias'). Deve corresponder a uma função no avaliador.", max_length=50, unique=True)),
                ('descricao', models.TextField(help_text='Explicação para o admin sobre como esta condição funciona.')),
                ('parametros_configuraveis', models.JSONField(default=dict, help_text='Define os campos que o admin pode preencher para esta condição.')),
            ],
        ),
        migrations.CreateModel(
            name='TrilhaDeConquistas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True)),
                ('descricao', models.TextField(help_text='Descreva o objetivo geral desta trilha de conquistas.')),
                ('icone', models.CharField(help_text="Ex: 'fas fa-graduation-cap' (classe do Font Awesome)", max_length=50)),
                ('ordem', models.PositiveIntegerField(default=0, help_text='Define a ordem de exibição das trilhas (menor primeiro).')),
            ],
            options={
                'verbose_name': 'Trilha de Conquistas',
                'verbose_name_plural': 'Trilhas de Conquistas',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='AvatarUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_desbloqueio', models.DateTimeField(auto_now_add=True)),
                ('avatar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamificacao.avatar')),
            ],
        ),
    ]
