# Generated by Django 5.2.5 on 2025-09-19 19:08

import django.db.models.deletion
import storages.backends.s3
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('gamificacao', '0016_gamificationsettings_bonus_multiplicador_acertos_consecutivos_and_more'),
        ('usuarios', '0006_userprofile_banner_equipado'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='gamificationsettings',
            name='bonus_consecutivo_ranking',
            field=models.PositiveIntegerField(default=100, help_text='XP adicional se o usuário ficou no Top 3 na semana/mês anterior também.', verbose_name='Bônus de XP por Top 3 Consecutivo'),
        ),
        migrations.AddField(
            model_name='gamificationsettings',
            name='bonus_xp_ranking_mensal',
            field=models.PositiveIntegerField(default=500, help_text='XP extra concedido aos 3 primeiros do ranking mensal.', verbose_name='Bônus de XP para Top 3 Mensal'),
        ),
        migrations.AddField(
            model_name='gamificationsettings',
            name='bonus_xp_ranking_semanal',
            field=models.PositiveIntegerField(default=250, help_text='XP extra concedido aos 3 primeiros do ranking semanal.', verbose_name='Bônus de XP para Top 3 Semanal'),
        ),
        migrations.AddField(
            model_name='gamificationsettings',
            name='xp_base_simulado_concluido',
            field=models.PositiveIntegerField(default=100, help_text='XP mínimo ganho apenas por finalizar um simulado, independente do desempenho.', verbose_name='XP Base por Simulado Concluído'),
        ),
        migrations.AlterField(
            model_name='avatar',
            name='imagem',
            field=models.ImageField(blank=True, null=True, storage=storages.backends.s3.S3Storage(), upload_to='gamificacao_recompensas/'),
        ),
        migrations.AlterField(
            model_name='avatar',
            name='tipo_desbloqueio',
            field=models.CharField(choices=[('NIVEL', 'Por Nível'), ('CONQUISTA', 'Por Conquista'), ('EVENTO', 'Evento Especial'), ('REGRA', 'Regra Automática')], max_length=20),
        ),
        migrations.AlterField(
            model_name='banner',
            name='imagem',
            field=models.ImageField(blank=True, null=True, storage=storages.backends.s3.S3Storage(), upload_to='gamificacao_recompensas/'),
        ),
        migrations.AlterField(
            model_name='banner',
            name='tipo_desbloqueio',
            field=models.CharField(choices=[('NIVEL', 'Por Nível'), ('CONQUISTA', 'Por Conquista'), ('EVENTO', 'Evento Especial'), ('REGRA', 'Regra Automática')], max_length=20),
        ),
        migrations.AlterField(
            model_name='borda',
            name='imagem',
            field=models.ImageField(blank=True, null=True, storage=storages.backends.s3.S3Storage(), upload_to='gamificacao_recompensas/'),
        ),
        migrations.AlterField(
            model_name='borda',
            name='tipo_desbloqueio',
            field=models.CharField(choices=[('NIVEL', 'Por Nível'), ('CONQUISTA', 'Por Conquista'), ('EVENTO', 'Evento Especial'), ('REGRA', 'Regra Automática')], max_length=20),
        ),
        migrations.CreateModel(
            name='RegraRecompensa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome da Regra')),
                ('ativo', models.BooleanField(default=True, verbose_name='Regra Ativa?')),
                ('gatilho', models.CharField(choices=[('COMPLETAR_SIMULADO', 'Completar um Simulado'), ('RANKING_SEMANAL_TOP_N', 'Ficar no Top N do Ranking Semanal'), ('RANKING_MENSAL_TOP_N', 'Ficar no Top N do Ranking Mensal')], max_length=50, verbose_name='Gatilho de Ativação')),
                ('condicoes', models.JSONField(blank=True, default=dict, help_text='Ex: {"top_n": 3} ou {"min_acertos_percent": 80}')),
                ('xp_extra', models.PositiveIntegerField(default=0, help_text='XP adicional concedido ao cumprir esta regra.')),
                ('avatares', models.ManyToManyField(blank=True, to='gamificacao.avatar', verbose_name='Avatares como Recompensa')),
                ('banners', models.ManyToManyField(blank=True, to='gamificacao.banner', verbose_name='Banners como Recompensa')),
                ('bordas', models.ManyToManyField(blank=True, to='gamificacao.borda', verbose_name='Bordas como Recompensa')),
            ],
        ),
        migrations.CreateModel(
            name='RecompensaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('data_concessao', models.DateTimeField(auto_now_add=True)),
                ('concedido_por', models.ForeignKey(blank=True, help_text='Admin que concedeu manualmente.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recompensas_ganhas', to='usuarios.userprofile')),
                ('origem', models.ForeignKey(blank=True, help_text='Regra que concedeu o prêmio.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamificacao.regrarecompensa')),
            ],
            options={
                'ordering': ['-data_concessao'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='gamificacao_content_ef5b0c_idx')],
            },
        ),
    ]
