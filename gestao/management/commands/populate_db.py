# gestao/management/commands/populate_db.py

from django.core.management.base import BaseCommand
from django.core import management

class Command(BaseCommand):
    help = 'Executa todos os scripts de popula√ß√£o do banco de dados na ordem correta.'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('===================================================='))
        self.stdout.write(self.style.SUCCESS('üöÄ INICIANDO POPULA√á√ÉO COMPLETA DO BANCO DE DADOS üöÄ'))
        self.stdout.write(self.style.SUCCESS('====================================================\n'))

        # A ordem de execu√ß√£o √© crucial para garantir que as depend√™ncias
        # entre os modelos (chaves estrangeiras) sejam satisfeitas.

        # 1. Usu√°rios: A base para todo o resto.
        self.stdout.write(self.style.NOTICE('\n[PASSO 1 de 5] Criando usu√°rios de teste...'))
        management.call_command('create_test_users')

        # 2. Conte√∫do Principal: Quest√µes, Disciplinas, etc.
        self.stdout.write(self.style.NOTICE('\n[PASSO 2 de 5] Criando conte√∫do de teste (Quest√µes, Coment√°rios)...'))
        management.call_command('create_test_content')

        # 3. Gamifica√ß√£o: Itens que podem ser recompensas.
        self.stdout.write(self.style.NOTICE('\n[PASSO 3 de 5] Criando elementos de gamifica√ß√£o (Conquistas, Recompensas)...'))
        management.call_command('create_test_gamification')
        
        # 4. Simulados: Utilizam as quest√µes j√° criadas.
        self.stdout.write(self.style.NOTICE('\n[PASSO 4 de 5] Criando simulados de teste...'))
        management.call_command('create_test_simulados')
        
        # 5. Notifica√ß√µes: Baseado no conte√∫do existente.
        self.stdout.write(self.style.NOTICE('\n[PASSO 5 de 5] Gerando notifica√ß√µes e den√∫ncias de teste...'))
        management.call_command('create_test_reports')
        
        self.stdout.write(self.style.SUCCESS('\n===================================================='))
        self.stdout.write(self.style.SUCCESS('‚úÖ POPULA√á√ÉO DO BANCO DE DADOS CONCLU√çDA! ‚úÖ'))
        self.stdout.write(self.style.SUCCESS('===================================================='))
        self.stdout.write(self.style.NOTICE('Execute `python manage.py runserver` para ver os resultados.'))