# Generated by Django 5.2.5 on 2025-09-07 17:07

from django.db import migrations
from django.db.models import Count

def limpar_duplicatas(apps, schema_editor):
    """
    Encontra e remove notificações duplicadas (mesmo usuário, mesma questão),
    mantendo apenas a mais recente de cada grupo.
    """
    Notificacao = apps.get_model('pratica', 'Notificacao')
    
    # 1. Encontrar as combinações de (usuário, questão) que são duplicadas
    duplicatas = (
        Notificacao.objects
        .values('usuario_reportou_id', 'questao_id')
        .annotate(count=Count('id'))
        .filter(count__gt=1)
    )

    # 2. Iterar sobre cada grupo de duplicatas para limpá-lo
    for item in duplicatas:
        usuario_id = item['usuario_reportou_id']
        questao_id = item['questao_id']

        # Medida de segurança caso algum usuário relacionado tenha sido deletado
        if not usuario_id or not questao_id:
            continue

        # Pega todas as notificações para esta combinação, ordenadas da mais nova para a mais antiga
        notificacoes_do_grupo = Notificacao.objects.filter(
            usuario_reportou_id=usuario_id,
            questao_id=questao_id
        ).order_by('-data_criacao')

        # 3. Mantém a primeira (a mais nova) e marca o resto para exclusão
        ids_para_deletar = list(notificacoes_do_grupo.values_list('id', flat=True)[1:])

        # 4. Deleta as notificações mais antigas e duplicadas
        if ids_para_deletar:
            Notificacao.objects.filter(id__in=ids_para_deletar).delete()
            print(f"\nLimpando {len(ids_para_deletar)} report(s) duplicado(s) para o usuário {usuario_id} e questão {questao_id}.")


class Migration(migrations.Migration):

    dependencies = [
        ('pratica', '0009_notificacao_data_arquivamento'),
    ]

    operations = [
        migrations.RunPython(limpar_duplicatas),
    ]